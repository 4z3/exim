# Exim test configuration 5700

exim_path = EXIM_PATH
host_lookup_order = bydns
spool_directory = DIR/spool
log_file_path = DIR/spool/log/%slog
gecos_pattern = ""
gecos_name = CALLER_NAME
tls_advertise_hosts =

# ----- Main settings -----

acl_smtp_rcpt = accept
acl_smtp_data = accept

event_action = ${acl {logger}}


# ----- ACL -----

begin acl

ev_tcp:
    accept condition = ${if eq {$event_name}{tcp:connect}}
	   logwrite = . [$host_address]:$host_port
    accept condition = ${if eq {$event_name}{tcp:close}}
	   logwrite = . [$sending_ip_address] -> \
			[$host_address]:$host_port
    accept

ev_smtp:
    accept
	   logwrite = . [$sending_ip_address] -> \
			[$host_address]:$host_port
	   logwrite = . banner <$event_data>

ev_msg_fail:
    accept condition = ${if eq {$event_name}{msg:fail:delivery}}
	   logwrite = . \
	    refused by fdqn <$host> \
	    local_part <$local_part> \
	    domain <$domain> \

    accept logwrite = . \
	    local_part <$local_part> \
	    domain <$domain> \
	    reason <$event_data>

ev_msg:
    accept condition = ${if eq {fail} {${listextract{2}{$event_name}}}}
	   acl = ev_msg_fail

    accept condition = ${if eq {$event_name}{msg:complete}}
	   logwrite = . finished: $message_exim_id

    accept condition = ${if !eq {$domain}{domain1}}
	   logwrite = $this_expansion_will_fail

    accept condition = ${if eq {$event_name}{msg:delivery}}
	   logwrite = . \
	    delivery \
	    ip <$host_address> \
	    port <$host_port> \
	    fqdn <$host> \
	    local_part <$local_part> \
	    domain <$domain> \
	    confirmation <$event_data> \
	    router <$router_name> \
	    transport <$transport_name>

    accept condition = ${if eq {$event_name}{msg:host:defer}}
	   logwrite = . \
	    deferral \
	    ip <$host_address> \
	    port <$host_port> \
	    fqdn <$host> \
	    local_part <$local_part> \
	    domain <$domain> \
	    errno <$event_defer_errno> \
	    errstr <$event_data> \
	    router <$router_name> \
	    transport <$transport_name>

logger:
    warn   logwrite = event $event_name
    accept condition = ${if eq {tcp} {${listextract{1}{$event_name}}}}
	   acl = ev_tcp
    accept condition = ${if eq {smtp} {${listextract{1}{$event_name}}}}
	   acl = ev_smtp
    accept condition = ${if eq {msg} {${listextract{1}{$event_name}}}}
	   acl = ev_msg


# ----- Routers -----

begin routers

dump_bounces:
  driver = redirect
  senders = :
  data = :blackhole:

others:
  driver = manualroute
  route_list = * 127.0.0.1 byname
  self = send
  transport = smtp
  no_more


# ----- Transports -----

begin transports

smtp:
  driver = smtp
  port = PORT_S
  command_timeout = 1s
  final_timeout = 1s
  event_action =   ${acl {logger}}

# End
