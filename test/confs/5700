# Exim test configuration 5700

exim_path = EXIM_PATH
host_lookup_order = bydns
rfc1413_query_timeout = 0s
spool_directory = DIR/spool
log_file_path = DIR/spool/log/%slog
gecos_pattern = ""
gecos_name = CALLER_NAME

# ----- Main settings -----

acl_smtp_rcpt = accept
acl_smtp_data = accept


# ----- ACL -----

begin acl

ev_tcp:
    accept condition = ${if eq {$tpda_event}{tcp:connect}}
	   logwrite = . [$host_address]:$sending_port
    accept condition = ${if eq {$tpda_event}{tcp:close}}
	   logwrite = . [$sending_ip_address] -> \
			[$host_address]:$host_port
    accept

ev_smtp:
    accept
	   logwrite = . [$sending_ip_address] -> \
			[$host_address]:$host_port
	   logwrite = . banner <$tpda_data>

ev_msg:
    accept condition = ${if !eq {$acl_arg2}{domain1}}
	   logwrite = $this_expansion_will_fail

    accept condition = ${if eq {$acl_arg1}{msg:delivery}}
	   logwrite = . \
	    delivery \
	    ip <$host_address> \
	    port <$host_port> \
	    fqdn <$host> \
	    local_part <$local_part> \
	    domain <$domain> \
	    confirmation <$tpda_data> \
	    router <$router_name> \
	    transport <$transport_name>

    accept condition = ${if eq {$acl_arg1}{msg:host:defer}}
	   logwrite = . \
	    deferral \
	    ip <$host_address> \
	    port <$host_port> \
	    fqdn <$host> \
	    local_part <$local_part> \
	    domain <$domain> \
	    errno <$tpda_defer_errno> \
	    errstr <$tpda_data> \
	    router <$router_name> \
	    transport <$transport_name>

logger:
    warn   logwrite = event $tpda_event
    accept condition = ${if eq {tcp} {${listextract{1}{$tpda_event}}}}
	   acl = ev_tcp
    accept condition = ${if eq {smtp} {${listextract{1}{$tpda_event}}}}
	   acl = ev_smtp
    accept condition = ${if eq {msg} {${listextract{1}{$tpda_event}}}}
	   acl = ev_msg $tpda_event $acl_arg2


# ----- Routers -----

begin routers

dump_bounces:
  driver = redirect
  senders = :
  data = :blackhole:

others:
  driver = manualroute
  route_list = * 127.0.0.1 byname
  self = send
  transport = smtp
  no_more


# ----- Transports -----

begin transports

smtp:
  driver = smtp
  port = PORT_S
  command_timeout = 1s
  final_timeout = 1s
  tpda_event_action =   ${acl {logger} {$tpda_event} {$domain} }

# End
